--go close to the object, open the object by pressing "E", buy the level2 mine and exit


////Create
Timer = 0;

Interval = 600;   // (10 seconds)

// Random Didium generation range
didiumMin = 0;
didiumMax = 1;
//////////////////Upgrading code below
shopOpen = false; 
global.shop = false; 

selected = 0;
selectedAnim = 0;
 
items = ds_list_create();

// Upgrade Building
ds_list_add(items, ["Minor_Level2", 1, 1, "", false]); 

itemCount = ds_list_size(items);

// GUI
guiWidth = display_get_gui_width();
guiHeight = display_get_gui_height();

menuWidth = guiWidth * 0.3;
menuMargin = guiWidth * 0.1;

previewWidth = (guiWidth - (menuWidth + menuMargin));

lastBoughtItemImage = undefined;


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////Step
// Increment the timer
Timer++;

// Check if the timer has reached the interval
if (Timer >= Interval) {
    Timer = 0;

    // Add 5 Rocks to the inventory
    for (var i = 0; i < ds_list_size(global.inv); i++) {
        var inv_item = global.inv[| i];
        if (is_array(inv_item) && inv_item[0] == "Rock") {
            inv_item[1] += 5;
            global.inv[| i] = inv_item;
        }
    }

    // Add random Didium to the inventory
    var randomDidium = irandom_range(didiumMin, didiumMax);
    for (var i = 0; i < ds_list_size(global.inv); i++) {
        var inv_item = global.inv[| i];
        if (is_array(inv_item) && inv_item[0] == "Didium") {
            inv_item[1] += randomDidium;
            global.inv[| i] = inv_item;
        }
    }
}
//////////////////Upgrading code below
if (!shopOpen && place_meeting(x, y + 10, oPlayer) && keyboard_check_pressed(ord("E"))) {
    shopOpen = true;
    global.shop = true;
}

else if (shopOpen && keyboard_check_pressed(vk_escape)) {
    shopOpen = false;
    global.shop = false;
}

// Shop is open, handling selection and purchases
if (shopOpen) {
    selectedAnim = lerp(selectedAnim, selected, 0.1);
    
    // Navigation using arrow keys
    if (keyboard_check_pressed(vk_down)) {
        selected++;
        if (selected == itemCount) selected = 0;
    }
    if (keyboard_check_pressed(vk_up)) {
        selected--;
        if (selected < 0) selected = itemCount - 1;
    }
    
    // Handle Enter key to buy the item
    if (keyboard_check_pressed(vk_enter)) {

        var arr = items[| selected];
        var item = arr[0];
        var rockCost = arr[1];
        var didiumCost = arr[2];
        var description = arr[3];
        var bought = arr[4];

        if (!bought) { 
            var rocks = 0;
            var didium = 0;

            // Check inventory for rocks and didium
            for (var i = 0; i < ds_list_size(global.inv); i++) {
                var inv_item = global.inv[| i];
                
                if (is_array(inv_item)) {
                    if (inv_item[0] == "Rock") {
                        rocks = inv_item[1];
                    }
                    if (inv_item[0] == "Didium") {
                        didium = inv_item[1];
                    }
                }
            }

            // Ensure the player has enough resources to purchase
            if (rocks >= rockCost && didium >= didiumCost) {
                rocks -= rockCost;
                didium -= didiumCost;

                // Update inventory with new resource amounts
                for (var i = 0; i < ds_list_size(global.inv); i++) {
                    var inv_item = global.inv[| i];
                    
                    if (is_array(inv_item)) {
                        if (inv_item[0] == "Rock") {
                            inv_item[1] = rocks;
                            global.inv[| i] = inv_item;
                        }
                        if (inv_item[0] == "Didium") {
                            inv_item[1] = didium;
                            global.inv[| i] = inv_item;
                        }
                    }
                }

                // Mark item as bought and update list
                arr[4] = true;
                items[| selected] = arr;

                // Store the current position of the shop object 
                var shop_x = x;
                var shop_y = y;

                // Move the shop object offscreen 
                x = -1000; 
                y = -1000;

                
                instance_destroy();

           
                instance_create_layer(shop_x, shop_y, "Instances", oMine_Minor_Level2); // Create the new item object
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////Draw GUI
if (!shopOpen) exit;

// Draw background image
var bgSprite = asset_get_index("sShop_Screen"); 
if (sprite_exists(bgSprite)) {
    draw_sprite(bgSprite, 500, 500, 500); 
}

// Background color and transparency
draw_set_color(c_black);


draw_set_color(c_white);

// Vertical spacing between items
var itemSpacing = 60; 

// Draw menu items
for (var i = 0; i < itemCount; i++) {
    var arr = items[| i];
    var item = arr[0];
    var rockCost = arr[1];
    var didiumCost = arr[2];
    var bought = arr[4];

    // Draw position
    var _x = menuMargin + menuWidth / 2;
    var _y = (guiHeight / 2) + (i - selectedAnim) * itemSpacing;
    
    // Draw scale
    var s = 1;
    if (i == selected) s = 1.4;
    
    // Selected item name
    if (i == selected) item = "> " + item + " <";
    
    // Draw item
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text_transformed(_x, _y, item, s, s, 0);
    
    // Draw item costs (Rocks and Didium)
    draw_text(_x, _y + 16, "Cost: " + string(rockCost) + " Rock, " + string(didiumCost) + " Didium");

    if (bought) {
        draw_text(_x, _y + 32, "(Already Purchased)");
    }
    
    draw_set_valign(fa_left);
    draw_set_halign(fa_left);
}

// Draw selected item preview and description
var arr = items[| selected];
var item = arr[0];
var sprite = asset_get_index("sItem_" + item);
var desc = arr[3];

var _x = (menuMargin + menuWidth) + previewWidth / 2;
var _y = (guiHeight / 2);

// Draw sprite 
if (sprite_exists(sprite)) {
    var s = 2;
    draw_sprite_ext(sprite, 0, _x, _y - 24, s, s, 0, -1, 1);
}

// Draw item description
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_text(_x, _y + 80, desc);


